{"uid":"537e0946a8292adc","name":"test_login_success","fullName":"src.tests.test_login#test_login_success","historyId":"d7250828c2bc668cfe9858cb88b836ce","time":{"start":1727166236741,"stop":1727166236741,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command '/Users/kevin/Library/Android/sdk/platform-tools/adb -P 5037 -s 1902390100180748 shell getprop ro.build.version.sdk' exited with code 1'; Command output: adb: device '1902390100180748' not found\n\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command '/Users/kevin/Library/Android/sdk/platform-tools/adb -P 5037 -s 1902390100180748 shell getprop ro.build.version.sdk' exited with code 1'; Command output: adb: device '1902390100180748' not found\n\n    at getResponseForW3CError (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:1145:9)\n    at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:485:57)","statusTrace":"@pytest.fixture(scope=\"session\")\n    def driver():\n        options = UiAutomator2Options()\n        options.platform_name = 'Android'\n        options.udid = '1902390100180748'\n        options.device_name = 'Android'\n        options.app = str(Path(__file__).parent.joinpath('app/LOKET MINT_1.24.09.02_Production.apk'))\n        options.automation_name = 'UiAutomator2'\n        options.auto_grant_permissions = True\n        options.new_command_timeout = 1200000\n        options.no_reset = False\n        options.dont_stop_app_on_reset = True\n        options.app_wait_activity = 'com.mkpmobile.retail.ui.SplashScreen'\n    \n>       driver = webdriver.Remote('http://localhost:4723', options=options)\n\nsrc/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.10/site-packages/appium/webdriver/webdriver.py:229: in __init__\n    super().__init__(\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\nvenv/lib/python3.10/site-packages/appium/webdriver/webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10c40ff10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:485:57)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command '/Users/kevin/Library/Android/sdk/platform-tools/adb -P 5037 -s 1902390100180748 shell getprop ro.build.version.sdk' exited with code 1'; Command output: adb: device '1902390100180748' not found\nE       \nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command '/Users/kevin/Library/Android/sdk/platform-tools/adb -P 5037 -s 1902390100180748 shell getprop ro.build.version.sdk' exited with code 1'; Command output: adb: device '1902390100180748' not found\nE       \nE           at getResponseForW3CError (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:1145:9)\nE           at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:485:57)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1727166236744,"stop":1727166238789,"duration":2045},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command '/Users/kevin/Library/Android/sdk/platform-tools/adb -P 5037 -s 1902390100180748 shell getprop ro.build.version.sdk' exited with code 1'; Command output: adb: device '1902390100180748' not found\n\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Error getting device API level. Original error: Error executing adbExec. Original error: 'Command '/Users/kevin/Library/Android/sdk/platform-tools/adb -P 5037 -s 1902390100180748 shell getprop ro.build.version.sdk' exited with code 1'; Command output: adb: device '1902390100180748' not found\n\n    at getResponseForW3CError (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:1145:9)\n    at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:485:57)\n","statusTrace":"  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1111, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/_pytest/fixtures.py\", line 883, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/src/conftest.py\", line 22, in driver\n    driver = webdriver.Remote('http://localhost:4723', options=options)\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/appium/webdriver/webdriver.py\", line 229, in __init__\n    super().__init__(\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 212, in __init__\n    self.start_session(capabilities)\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/appium/webdriver/webdriver.py\", line 319, in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/kevin/automated-testing/Apps2pay/MINT/MINT_Loket/venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"src.tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"macbooks-MacBook-Air.local"},{"name":"thread","value":"25131-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["run(order=1)","@pytest.mark.usefixtures('driver')"]},"source":"537e0946a8292adc.json","parameterValues":[]}