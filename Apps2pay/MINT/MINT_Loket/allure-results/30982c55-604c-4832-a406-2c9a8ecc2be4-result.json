{"name": "test_payment_QRIS", "status": "failed", "statusDetails": {"message": "Failed: terdapat error selama pengujian yaitu: Message: Could not parse selector expression `new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))`: UiScrollable has no `scrollIntoTextView` method; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\nio.appium.uiautomator2.common.exceptions.UiSelectorSyntaxException: Could not parse selector expression `new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))`: UiScrollable has no `scrollIntoTextView` method\n\tat io.appium.uiautomator2.utils.UiExpressionParser.findMethod(UiExpressionParser.java:197)\n\tat io.appium.uiautomator2.utils.UiScrollableParser.consumeMethodCall(UiScrollableParser.java:104)\n\tat io.appium.uiautomator2.utils.UiScrollableParser.parse(UiScrollableParser.java:66)\n\tat io.appium.uiautomator2.utils.UiAutomatorParser.consumeStatement(UiAutomatorParser.java:91)\n\tat io.appium.uiautomator2.utils.UiAutomatorParser.parse(UiAutomatorParser.java:47)\n\tat io.appium.uiautomator2.utils.ElementLocationHelpers.toSelectors(ElementLocationHelpers.java:135)\n\tat io.appium.uiautomator2.utils.ElementLocationHelpers.toSelector(ElementLocationHelpers.java:131)\n\tat io.appium.uiautomator2.utils.ByUiAutomatorFinder.findOne(ByUiAutomatorFinder.java:54)\n\tat io.appium.uiautomator2.utils.ByUiAutomatorFinder.findOne(ByUiAutomatorFinder.java:49)\n\tat io.appium.uiautomator2.utils.ElementLocationHelpers.findElement(ElementLocationHelpers.java:160)\n\tat io.appium.uiautomator2.handler.FindElement.safeHandle(FindElement.java:60)\n\tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)\n\tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\n\tat java.lang.Thread.run(Thread.java:919)", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"59cc7b83-cd41-4d5c-a718-85de5ee15e40\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n>           QRIS.scroll_to_text(\"QRIS\")\n\nsrc/tests/test_openpayment.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.openpayment_page.PaymentQRIS object at 0x1050b7070>, text = 'QRIS'\n\n    def scroll_to_text(self, text):\n>       button_pilih_payment = WebDriverWait(self.driver, 20).until(EC.element_to_be_clickable((AppiumBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"{}\"))'.format(text))))\n\nsrc/pages/openpayment_page.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"59cc7b83-cd41-4d5c-a718-85de5ee15e40\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x1050b1870>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"59cc7b83-cd41-4d5c-a718-85de5ee15e40\")>\n\n    def _predicate(driver: WebDriverOrWebElement):\n        target = mark\n        if not isinstance(target, WebElement):  # if given locator instead of WebElement\n>           target = driver.find_element(*target)  # grab element at locator\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"59cc7b83-cd41-4d5c-a718-85de5ee15e40\")>, by = '-android uiautomator'\nvalue = 'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))'\n\n    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -> MobileWebElement:\n        \"\"\"\n        Find an element given a AppiumBy strategy and locator\n    \n        Args:\n            by: The strategy\n            value: The locator\n    \n        Usage:\n            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # We prefer to patch locators in the client code\n        # Checking current context every time a locator is accessed could significantly slow down tests\n        # Check https://github.com/appium/python-client/pull/724 before submitting any issue\n        # if by == By.ID:\n        #     by = By.CSS_SELECTOR\n        #     value = '[id=\"%s\"]' % value\n        # elif by == By.TAG_NAME:\n        #     by = By.CSS_SELECTOR\n        # elif by == By.CLASS_NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = \".%s\" % value\n        # elif by == By.NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\nvenv/lib/python3.10/site-packages/appium/webdriver/webdriver.py:382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"59cc7b83-cd41-4d5c-a718-85de5ee15e40\")>, driver_command = 'findElement'\nparams = {'using': '-android uiautomator', 'value': 'new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x1050b7730>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"Could not parse selector expression `new UiS...ctory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\\\\n\\\\tat java.lang.Thread.run(Thread.java:919)\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        if isinstance(payload, dict):\n            payload_dict = payload\n        else:\n            try:\n                payload_dict = json.loads(payload)\n            except (json.JSONDecodeError, TypeError):\n                return\n            if not isinstance(payload_dict, dict):\n                return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.InvalidSelectorException: Message: Could not parse selector expression `new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))`: UiScrollable has no `scrollIntoTextView` method; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       io.appium.uiautomator2.common.exceptions.UiSelectorSyntaxException: Could not parse selector expression `new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))`: UiScrollable has no `scrollIntoTextView` method\nE       \tat io.appium.uiautomator2.utils.UiExpressionParser.findMethod(UiExpressionParser.java:197)\nE       \tat io.appium.uiautomator2.utils.UiScrollableParser.consumeMethodCall(UiScrollableParser.java:104)\nE       \tat io.appium.uiautomator2.utils.UiScrollableParser.parse(UiScrollableParser.java:66)\nE       \tat io.appium.uiautomator2.utils.UiAutomatorParser.consumeStatement(UiAutomatorParser.java:91)\nE       \tat io.appium.uiautomator2.utils.UiAutomatorParser.parse(UiAutomatorParser.java:47)\nE       \tat io.appium.uiautomator2.utils.ElementLocationHelpers.toSelectors(ElementLocationHelpers.java:135)\nE       \tat io.appium.uiautomator2.utils.ElementLocationHelpers.toSelector(ElementLocationHelpers.java:131)\nE       \tat io.appium.uiautomator2.utils.ByUiAutomatorFinder.findOne(ByUiAutomatorFinder.java:54)\nE       \tat io.appium.uiautomator2.utils.ByUiAutomatorFinder.findOne(ByUiAutomatorFinder.java:49)\nE       \tat io.appium.uiautomator2.utils.ElementLocationHelpers.findElement(ElementLocationHelpers.java:160)\nE       \tat io.appium.uiautomator2.handler.FindElement.safeHandle(FindElement.java:60)\nE       \tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)\nE       \tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\nE       \tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\nE       \tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\nE       \tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\nE       \tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\nE       \tat java.lang.Thread.run(Thread.java:919)\n\nvenv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:125: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"59cc7b83-cd41-4d5c-a718-85de5ee15e40\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n            QRIS.scroll_to_text(\"QRIS\")\n            QRIS.button_bayar_payment()\n            QRIS.button_confirm_payment_QRIS()\n            QRIS.wait_for_qrcode()\n            QRIS.success_page()\n            QRIS.reprint_struk()\n            QRIS.button_back()\n            QRIS.openpayment_page()\n            logging.info(\"Pembayaran QRIS berhasil\")\n        except Exception as e :\n            logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n>           pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\nE           Failed: terdapat error selama pengujian yaitu: Message: Could not parse selector expression `new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))`: UiScrollable has no `scrollIntoTextView` method; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE           Stacktrace:\nE           io.appium.uiautomator2.common.exceptions.UiSelectorSyntaxException: Could not parse selector expression `new UiScrollable(new UiSelector().scrollable(true)).scrollIntoTextView(new UiSelector().textContains(\"QRIS\"))`: UiScrollable has no `scrollIntoTextView` method\nE           \tat io.appium.uiautomator2.utils.UiExpressionParser.findMethod(UiExpressionParser.java:197)\nE           \tat io.appium.uiautomator2.utils.UiScrollableParser.consumeMethodCall(UiScrollableParser.java:104)\nE           \tat io.appium.uiautomator2.utils.UiScrollableParser.parse(UiScrollableParser.java:66)\nE           \tat io.appium.uiautomator2.utils.UiAutomatorParser.consumeStatement(UiAutomatorParser.java:91)\nE           \tat io.appium.uiautomator2.utils.UiAutomatorParser.parse(UiAutomatorParser.java:47)\nE           \tat io.appium.uiautomator2.utils.ElementLocationHelpers.toSelectors(ElementLocationHelpers.java:135)\nE           \tat io.appium.uiautomator2.utils.ElementLocationHelpers.toSelector(ElementLocationHelpers.java:131)\nE           \tat io.appium.uiautomator2.utils.ByUiAutomatorFinder.findOne(ByUiAutomatorFinder.java:54)\nE           \tat io.appium.uiautomator2.utils.ByUiAutomatorFinder.findOne(ByUiAutomatorFinder.java:49)\nE           \tat io.appium.uiautomator2.utils.ElementLocationHelpers.findElement(ElementLocationHelpers.java:160)\nE           \tat io.appium.uiautomator2.handler.FindElement.safeHandle(FindElement.java:60)\nE           \tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\nE           \tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)\nE           \tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)\nE           \tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\nE           \tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\nE           \tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\nE           \tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\nE           \tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\nE           \tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\nE           \tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\nE           \tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\nE           \tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\nE           \tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\nE           \tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\nE           \tat java.lang.Thread.run(Thread.java:919)\n\nsrc/tests/test_openpayment.py:92: Failed"}, "attachments": [{"name": "log", "source": "2530c270-c56c-4000-87de-86c9cf955fcf-attachment.txt", "type": "text/plain"}], "start": 1728294763838, "stop": 1728294767104, "uuid": "ae3c94dd-2bb4-4106-ab86-2c7d92732d9c", "historyId": "d07f6f413a18bfe710d61a01744dd71e", "testCaseId": "6ddb9c087ac951e67b0c7feb7ee634ad", "fullName": "src.tests.test_openpayment#test_payment_QRIS", "labels": [{"name": "tag", "value": "run(order=5)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_openpayment"}, {"name": "host", "value": "macbooks-MacBook-Air.local"}, {"name": "thread", "value": "12092-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_openpayment"}]}