{"name": "test_payment_QRIS", "status": "failed", "statusDetails": {"message": "Failed: terdapat error selama pengujian yaitu: Message: Unable to perform W3C actions. Check the logcat output for possible error reports and make sure your input actions chain is valid.\nStacktrace:\nio.appium.uiautomator2.common.exceptions.InvalidElementStateException: Unable to perform W3C actions. Check the logcat output for possible error reports and make sure your input actions chain is valid.\n\tat io.appium.uiautomator2.handler.W3CActions.safeHandle(W3CActions.java:82)\n\tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)\n\tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\n\tat java.lang.Thread.run(Thread.java:919)", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"35a5eaa8-10a5-42b8-9733-375cb6cd2ae2\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n>           QRIS.scroll_to_payment(\"QRIS\")\n\nsrc/tests/test_openpayment.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.openpayment_page.PaymentQRIS object at 0x10ee4a170>, text = 'QRIS'\n\n    def scroll_to_payment(self, text):\n>       self.driver.swipe(470, 1400, 470, 950, 330)\n\nsrc/pages/openpayment_page.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"35a5eaa8-10a5-42b8-9733-375cb6cd2ae2\")>, start_x = 470, start_y = 1400, end_x = 470, end_y = 950\nduration = 330\n\n    def swipe(self, start_x: int, start_y: int, end_x: int, end_y: int, duration: int = 0) -> 'WebDriver':\n        \"\"\"Swipe from one point to another point, for an optional duration.\n    \n        Args:\n            start_x: x-coordinate at which to start\n            start_y: y-coordinate at which to start\n            end_x: x-coordinate at which to stop\n            end_y: y-coordinate at which to stop\n            duration: defines the swipe speed as time taken to swipe from point a to point b, in ms.\n    \n        Usage:\n            driver.swipe(100, 100, 100, 400)\n    \n        Returns:\n            Union['WebDriver', 'ActionHelpers']: Self instance\n        \"\"\"\n        touch_input = PointerInput(interaction.POINTER_TOUCH, 'touch')\n    \n        actions = ActionChains(self)\n        actions.w3c_actions = ActionBuilder(self, mouse=touch_input)\n        actions.w3c_actions.pointer_action.move_to_location(start_x, start_y)\n        actions.w3c_actions.pointer_action.pointer_down()\n        if duration > 0:\n            actions.w3c_actions = ActionBuilder(self, mouse=touch_input, duration=duration)\n        actions.w3c_actions.pointer_action.move_to_location(end_x, end_y)\n        actions.w3c_actions.pointer_action.release()\n>       actions.perform()\n\nvenv/lib/python3.10/site-packages/appium/webdriver/extensions/action_helpers.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.action_chains.ActionChains object at 0x10ee493f0>\n\n    def perform(self) -> None:\n        \"\"\"Performs all stored actions.\"\"\"\n>       self.w3c_actions.perform()\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/common/action_chains.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.actions.action_builder.ActionBuilder object at 0x10ee49570>\n\n    def perform(self) -> None:\n        enc = {\"actions\": []}\n        for device in self.devices:\n            encoded = device.encode()\n            if encoded[\"actions\"]:\n                enc[\"actions\"].append(encoded)\n                device.actions = []\n>       self.driver.execute(Command.W3C_ACTIONS, enc)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/common/actions/action_builder.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"35a5eaa8-10a5-42b8-9733-375cb6cd2ae2\")>, driver_command = 'actions'\nparams = {'actions': [{'actions': [{'duration': 250, 'origin': 'viewport', 'type': 'pointerMove', 'x': 470, ...}, {'button': 0,...': 0, 'duration': 0, 'type': 'pointerUp'}], 'id': 'touch', 'parameters': {'pointerType': 'touch'}, 'type': 'pointer'}]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10ee4ace0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"Unable to perform W3C actions. Check th...ctory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\\\\n\\\\tat java.lang.Thread.run(Thread.java:919)\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        if isinstance(payload, dict):\n            payload_dict = payload\n        else:\n            try:\n                payload_dict = json.loads(payload)\n            except (json.JSONDecodeError, TypeError):\n                return\n            if not isinstance(payload_dict, dict):\n                return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.InvalidElementStateException: Message: Unable to perform W3C actions. Check the logcat output for possible error reports and make sure your input actions chain is valid.\nE       Stacktrace:\nE       io.appium.uiautomator2.common.exceptions.InvalidElementStateException: Unable to perform W3C actions. Check the logcat output for possible error reports and make sure your input actions chain is valid.\nE       \tat io.appium.uiautomator2.handler.W3CActions.safeHandle(W3CActions.java:82)\nE       \tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)\nE       \tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\nE       \tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\nE       \tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\nE       \tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\nE       \tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\nE       \tat java.lang.Thread.run(Thread.java:919)\n\nvenv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:125: InvalidElementStateException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"35a5eaa8-10a5-42b8-9733-375cb6cd2ae2\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n            QRIS.scroll_to_payment(\"QRIS\")\n            QRIS.button_bayar_payment()\n            QRIS.button_confirm_payment_QRIS()\n            QRIS.wait_for_qrcode()\n            QRIS.success_page()\n            QRIS.reprint_struk()\n            QRIS.button_back()\n            QRIS.openpayment_page()\n            logging.info(\"Pembayaran QRIS berhasil\")\n        except Exception as e :\n            logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n>           pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\nE           Failed: terdapat error selama pengujian yaitu: Message: Unable to perform W3C actions. Check the logcat output for possible error reports and make sure your input actions chain is valid.\nE           Stacktrace:\nE           io.appium.uiautomator2.common.exceptions.InvalidElementStateException: Unable to perform W3C actions. Check the logcat output for possible error reports and make sure your input actions chain is valid.\nE           \tat io.appium.uiautomator2.handler.W3CActions.safeHandle(W3CActions.java:82)\nE           \tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\nE           \tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:259)\nE           \tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:253)\nE           \tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:77)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\nE           \tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\nE           \tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\nE           \tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE           \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE           \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE           \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\nE           \tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\nE           \tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\nE           \tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\nE           \tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\nE           \tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\nE           \tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\nE           \tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\nE           \tat java.lang.Thread.run(Thread.java:919)\n\nsrc/tests/test_openpayment.py:92: Failed"}, "attachments": [{"name": "log", "source": "c5abc552-d579-49b9-bd4d-1e7d6d0aacb9-attachment.txt", "type": "text/plain"}], "start": 1728900400087, "stop": 1728900404777, "uuid": "a5bd3870-e511-41fe-a13a-870d1bc67ee9", "historyId": "d07f6f413a18bfe710d61a01744dd71e", "testCaseId": "6ddb9c087ac951e67b0c7feb7ee634ad", "fullName": "src.tests.test_openpayment#test_payment_QRIS", "labels": [{"name": "tag", "value": "run(order=5)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_openpayment"}, {"name": "host", "value": "macbooks-MacBook-Air.local"}, {"name": "thread", "value": "19206-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_openpayment"}]}