{"name": "test_payment_QRIS", "status": "failed", "statusDetails": {"message": "Failed: terdapat error selama pengujian yaitu: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\n    at UIA2Proxy.command (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/jsonwp-proxy/proxy.js:350:13)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at AndroidUiautomator2Driver.doFindElementOrEls (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/find.js:40:5)\n    at doFind (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/find.ts:47:17)\n    at wrappedCondFn (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/timeout.ts:137:14)\n    at spin (/usr/local/lib/node_modules/appium/node_modules/asyncbox/lib/asyncbox.js:219:20)\n    at waitForCondition (/usr/local/lib/node_modules/appium/node_modules/asyncbox/lib/asyncbox.js:236:10)\n    at AndroidUiautomator2Driver.implicitWaitForCondition (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/timeout.ts:139:12)\n    at AndroidUiautomator2Driver.findElOrEls (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/find.ts:70:5)\n    at AndroidUiautomator2Driver.findElOrElsWithProcessing (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:60:12)\n    at AndroidUiautomator2Driver.findElement (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:75:12)", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"5277a3bc-8ac9-4936-bbe5-4889a419a2e2\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n            QRIS.swipe_by_coordinates(300, 1000, 350, 250)\n            QRIS.select_payment(\"QRIS\")\n            QRIS.button_bayar_payment()\n            QRIS.button_confirm_payment_QRIS()\n            QRIS.wait_for_qrcode()\n            QRIS.qris_page()\n>           QRIS.success_page()\n\nsrc/tests/test_openpayment.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.openpayment_page.PaymentQRIS object at 0x108fade10>\n\n    def success_page(self):\n>       WebDriverWait(self.driver, 20).until(EC.presence_of_element_located((AppiumBy.ID, 'com.mkpmobile.retail.mitramint:id/action_bar_root')))\n\nsrc/pages/openpayment_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5277a3bc-8ac9-4936-bbe5-4889a419a2e2\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x108f9da20>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"5277a3bc-8ac9-4936-bbe5-4889a419a2e2\")>\n\n    def _predicate(driver: WebDriverOrWebElement):\n>       return driver.find_element(*locator)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"5277a3bc-8ac9-4936-bbe5-4889a419a2e2\")>, by = 'id'\nvalue = 'com.mkpmobile.retail.mitramint:id/action_bar_root'\n\n    def find_element(self, by: str = AppiumBy.ID, value: Union[str, Dict, None] = None) -> MobileWebElement:\n        \"\"\"\n        Find an element given a AppiumBy strategy and locator\n    \n        Args:\n            by: The strategy\n            value: The locator\n    \n        Usage:\n            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='accessibility_id')\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # We prefer to patch locators in the client code\n        # Checking current context every time a locator is accessed could significantly slow down tests\n        # Check https://github.com/appium/python-client/pull/724 before submitting any issue\n        # if by == By.ID:\n        #     by = By.CSS_SELECTOR\n        #     value = '[id=\"%s\"]' % value\n        # elif by == By.TAG_NAME:\n        #     by = By.CSS_SELECTOR\n        # elif by == By.CLASS_NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = \".%s\" % value\n        # elif by == By.NAME:\n        #     by = By.CSS_SELECTOR\n        #     value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\nvenv/lib/python3.10/site-packages/appium/webdriver/webdriver.py:379: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"5277a3bc-8ac9-4936-bbe5-4889a419a2e2\")>, driver_command = 'findElement'\nparams = {'using': 'id', 'value': 'com.mkpmobile.retail.mitramint:id/action_bar_root'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x108fae9e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...lement (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:75:12)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        if isinstance(payload, dict):\n            payload_dict = payload\n        else:\n            try:\n                payload_dict = json.loads(payload)\n            except (json.JSONDecodeError, TypeError):\n                return\n            if not isinstance(payload_dict, dict):\n                return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE           at UIA2Proxy.command (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/jsonwp-proxy/proxy.js:350:13)\nE           at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE           at AndroidUiautomator2Driver.doFindElementOrEls (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/find.js:40:5)\nE           at doFind (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/find.ts:47:17)\nE           at wrappedCondFn (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/timeout.ts:137:14)\nE           at spin (/usr/local/lib/node_modules/appium/node_modules/asyncbox/lib/asyncbox.js:219:20)\nE           at waitForCondition (/usr/local/lib/node_modules/appium/node_modules/asyncbox/lib/asyncbox.js:236:10)\nE           at AndroidUiautomator2Driver.implicitWaitForCondition (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/timeout.ts:139:12)\nE           at AndroidUiautomator2Driver.findElOrEls (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/find.ts:70:5)\nE           at AndroidUiautomator2Driver.findElOrElsWithProcessing (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:60:12)\nE           at AndroidUiautomator2Driver.findElement (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:75:12)\n\nvenv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:125: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"5277a3bc-8ac9-4936-bbe5-4889a419a2e2\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n            QRIS.swipe_by_coordinates(300, 1000, 350, 250)\n            QRIS.select_payment(\"QRIS\")\n            QRIS.button_bayar_payment()\n            QRIS.button_confirm_payment_QRIS()\n            QRIS.wait_for_qrcode()\n            QRIS.qris_page()\n            QRIS.success_page()\n            QRIS.reprint_struk()\n            QRIS.button_back()\n            QRIS.openpayment_page()\n            logging.info(\"Pembayaran QRIS berhasil\")\n        except Exception as e :\n            logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n>           pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\nE           Failed: terdapat error selama pengujian yaitu: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE           Stacktrace:\nE           UnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nE               at UIA2Proxy.command (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/jsonwp-proxy/proxy.js:350:13)\nE               at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE               at AndroidUiautomator2Driver.doFindElementOrEls (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/find.js:40:5)\nE               at doFind (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/find.ts:47:17)\nE               at wrappedCondFn (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/timeout.ts:137:14)\nE               at spin (/usr/local/lib/node_modules/appium/node_modules/asyncbox/lib/asyncbox.js:219:20)\nE               at waitForCondition (/usr/local/lib/node_modules/appium/node_modules/asyncbox/lib/asyncbox.js:236:10)\nE               at AndroidUiautomator2Driver.implicitWaitForCondition (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/timeout.ts:139:12)\nE               at AndroidUiautomator2Driver.findElOrEls (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/find.ts:70:5)\nE               at AndroidUiautomator2Driver.findElOrElsWithProcessing (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:60:12)\nE               at AndroidUiautomator2Driver.findElement (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:75:12)\n\nsrc/tests/test_openpayment.py:94: Failed"}, "attachments": [{"name": "log", "source": "8d477a96-10c3-4c38-9778-ba134c6ff42b-attachment.txt", "type": "text/plain"}], "start": 1730455025146, "stop": 1730455097900, "uuid": "74be6f77-2773-4de6-bdbf-11a297061572", "historyId": "d07f6f413a18bfe710d61a01744dd71e", "testCaseId": "6ddb9c087ac951e67b0c7feb7ee634ad", "fullName": "src.tests.test_openpayment#test_payment_QRIS", "labels": [{"name": "tag", "value": "run(order=5)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_openpayment"}, {"name": "host", "value": "macbooks-MacBook-Air.local"}, {"name": "thread", "value": "38286-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_openpayment"}]}