{"name": "test_payment_QRIS", "status": "failed", "statusDetails": {"message": "Failed: terdapat error selama pengujian yaitu: Message: Both strategy and selector arguments must be provided\nStacktrace:\nInvalidArgumentError: Both strategy and selector arguments must be provided\n    at AndroidUiautomator2Driver.mobileScroll (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/gestures.js:247:11)\n    at AndroidUiautomator2Driver.executeMobile (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/execute.js:150:58)\n    at AndroidUiautomator2Driver.executeMobile (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/execute.js:66:50)\n    at AndroidUiautomator2Driver.execute (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/execute.js:115:23)\n    at runCommandPromise (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:115:20)\n    at /usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:171:12\n    at AsyncLock._promiseTry (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:306:31)\n    at exec (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:170:9)\n    at AsyncLock.acquire (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:189:3)\n    at AndroidUiautomator2Driver.executeCommand (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:159:39)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at defaultBehavior (/usr/local/lib/node_modules/appium/lib/appium.js:1122:14)\n    at AppiumDriver.executeWrappedCommand (/usr/local/lib/node_modules/appium/lib/appium.js:1228:16)\n    at AppiumDriver.executeCommand (/usr/local/lib/node_modules/appium/lib/appium.js:1134:17)\n    at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:387:19)", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"93e45881-e1ca-45ea-90d4-230d60c5322b\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n>           QRIS.scroll_to_payment(\"QRIS\")\n\nsrc/tests/test_openpayment.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.openpayment_page.PaymentQRIS object at 0x10db0b130>, text = 'QRIS'\n\n    def scroll_to_payment(self, text):\n>       self.driver.execute_script(\"mobile: scroll\", {\"direction\": \"down\"})\n\nsrc/pages/openpayment_page.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"93e45881-e1ca-45ea-90d4-230d60c5322b\")>, script = 'mobile: scroll', args = ({'direction': 'down'},)\nconverted_args = [{'direction': 'down'}], command = 'w3cExecuteScript'\n\n    def execute_script(self, script, *args):\n        \"\"\"Synchronously Executes JavaScript in the current window/frame.\n    \n        :Args:\n         - script: The JavaScript to execute.\n         - \\\\*args: Any applicable arguments for your JavaScript.\n    \n        :Usage:\n            ::\n    \n                driver.execute_script('return document.title;')\n        \"\"\"\n        if isinstance(script, ScriptKey):\n            try:\n                script = self.pinned_scripts[script.id]\n            except KeyError:\n                raise JavascriptException(\"Pinned script could not be found\")\n    \n        converted_args = list(args)\n        command = Command.W3C_EXECUTE_SCRIPT\n    \n>       return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:414: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"93e45881-e1ca-45ea-90d4-230d60c5322b\")>, driver_command = 'w3cExecuteScript'\nparams = {'args': [{'direction': 'down'}], 'script': 'mobile: scroll'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10db0b760>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"Both strategy and selector arguments must be...asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:387:19)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        if isinstance(payload, dict):\n            payload_dict = payload\n        else:\n            try:\n                payload_dict = json.loads(payload)\n            except (json.JSONDecodeError, TypeError):\n                return\n            if not isinstance(payload_dict, dict):\n                return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.InvalidArgumentException: Message: Both strategy and selector arguments must be provided\nE       Stacktrace:\nE       InvalidArgumentError: Both strategy and selector arguments must be provided\nE           at AndroidUiautomator2Driver.mobileScroll (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/gestures.js:247:11)\nE           at AndroidUiautomator2Driver.executeMobile (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/execute.js:150:58)\nE           at AndroidUiautomator2Driver.executeMobile (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/execute.js:66:50)\nE           at AndroidUiautomator2Driver.execute (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/execute.js:115:23)\nE           at runCommandPromise (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:115:20)\nE           at /usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:171:12\nE           at AsyncLock._promiseTry (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:306:31)\nE           at exec (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:170:9)\nE           at AsyncLock.acquire (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:189:3)\nE           at AndroidUiautomator2Driver.executeCommand (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:159:39)\nE           at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE           at defaultBehavior (/usr/local/lib/node_modules/appium/lib/appium.js:1122:14)\nE           at AppiumDriver.executeWrappedCommand (/usr/local/lib/node_modules/appium/lib/appium.js:1228:16)\nE           at AppiumDriver.executeCommand (/usr/local/lib/node_modules/appium/lib/appium.js:1134:17)\nE           at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:387:19)\n\nvenv/lib/python3.10/site-packages/appium/webdriver/errorhandler.py:125: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"93e45881-e1ca-45ea-90d4-230d60c5322b\")>\n\n    @pytest.mark.usefixtures('driver')\n    @pytest.mark.run(order=5)\n    # def test_payment_tunai(driver):\n    #     tunai = PaymentTunai(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran tunai')\n    #         tunai.click_menu_openpayment()\n    #         tunai.input_amount()\n    #         tunai.click_button_lanjutkan()\n    #         tunai.scroll_to_text('TUNAI')\n    #         tunai.button_bayar_payment()\n    #         tunai.button_confirm_payment_tunai()\n    #         tunai.button_bayar_tunai()\n    #         tunai.success_page()\n    #         tunai.reprint_struk()\n    #         tunai.button_back()\n    #         tunai.openpayment_page()\n    #         logging.info(\"Pembayaran tunai berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_debit(driver):\n    #     debit = PaymentDebit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran debit')\n    #         debit.click_menu_openpayment()\n    #         debit.input_amount()\n    #         debit.click_button_lanjutkan()\n    #         debit.scroll_to_text('DEBIT CARD')\n    #         debit.button_bayar_payment()\n    #         debit.button_confirm_payment_debit()\n    #         debit.insert_card_page()\n    #         debit.confirm_payment_debit()\n    #         debit.input_PIN_debit()\n    #         debit.success_page()\n    #         debit.reprint_struk()\n    #         debit.button_back()\n    #         debit.openpayment_page()\n    #         logging.info(\"Pembayaran debit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    # def test_payment_credit(driver):\n    #     credit = PaymentCredit(driver)\n    #     try:\n    #         logging.info('Mulai pengujian pembayaran credit')\n    #         credit.click_menu_openpayment()\n    #         credit.input_amount()\n    #         credit.click_button_lanjutkan()\n    #         credit.scroll_to_text(\"CREDIT CARD\")\n    #         credit.button_bayar_payment()\n    #         credit.button_confirm_payment_credit()\n    #         credit.insert_card_page()\n    #         credit.confirm_payment_credit()\n    #         credit.input_PIN_credit()\n    #         credit.success_page()\n    #         credit.reprint_struk()\n    #         credit.button_back()\n    #         credit.openpayment_page()\n    #         logging.info(\"Pembayaran credit berhasil\")\n    #     except Exception as e :\n    #         logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n    #         pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\n    \n    def test_payment_QRIS(driver):\n        QRIS = PaymentQRIS(driver)\n        try:\n            logging.info('Mulai pengujian pembayaran QRIS')\n            QRIS.click_menu_openpayment()\n            QRIS.input_amount()\n            QRIS.click_button_lanjutkan()\n            QRIS.scroll_to_payment(\"QRIS\")\n            QRIS.button_bayar_payment()\n            QRIS.button_confirm_payment_QRIS()\n            QRIS.wait_for_qrcode()\n            QRIS.success_page()\n            QRIS.reprint_struk()\n            QRIS.button_back()\n            QRIS.openpayment_page()\n            logging.info(\"Pembayaran QRIS berhasil\")\n        except Exception as e :\n            logging.error(f'Terdapat error selama pengujian yaitu: {e}')\n>           pytest.fail(f'terdapat error selama pengujian yaitu: {e}')\nE           Failed: terdapat error selama pengujian yaitu: Message: Both strategy and selector arguments must be provided\nE           Stacktrace:\nE           InvalidArgumentError: Both strategy and selector arguments must be provided\nE               at AndroidUiautomator2Driver.mobileScroll (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/gestures.js:247:11)\nE               at AndroidUiautomator2Driver.executeMobile (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/execute.js:150:58)\nE               at AndroidUiautomator2Driver.executeMobile (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/lib/commands/execute.js:66:50)\nE               at AndroidUiautomator2Driver.execute (/Users/kevin/.appium/node_modules/appium-uiautomator2-driver/node_modules/appium-android-driver/lib/commands/execute.js:115:23)\nE               at runCommandPromise (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:115:20)\nE               at /usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:171:12\nE               at AsyncLock._promiseTry (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:306:31)\nE               at exec (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:170:9)\nE               at AsyncLock.acquire (/usr/local/lib/node_modules/appium/node_modules/async-lock/lib/index.js:189:3)\nE               at AndroidUiautomator2Driver.executeCommand (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/basedriver/driver.ts:159:39)\nE               at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE               at defaultBehavior (/usr/local/lib/node_modules/appium/lib/appium.js:1122:14)\nE               at AppiumDriver.executeWrappedCommand (/usr/local/lib/node_modules/appium/lib/appium.js:1228:16)\nE               at AppiumDriver.executeCommand (/usr/local/lib/node_modules/appium/lib/appium.js:1134:17)\nE               at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:387:19)\n\nsrc/tests/test_openpayment.py:92: Failed"}, "attachments": [{"name": "log", "source": "826d41a0-3541-4efe-909f-2b487438c5f2-attachment.txt", "type": "text/plain"}], "start": 1728897983917, "stop": 1728897987659, "uuid": "6bb2192e-55f7-49ef-80e1-d270c441eecf", "historyId": "d07f6f413a18bfe710d61a01744dd71e", "testCaseId": "6ddb9c087ac951e67b0c7feb7ee634ad", "fullName": "src.tests.test_openpayment#test_payment_QRIS", "labels": [{"name": "tag", "value": "run(order=5)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_openpayment"}, {"name": "host", "value": "macbooks-MacBook-Air.local"}, {"name": "thread", "value": "17974-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_openpayment"}]}